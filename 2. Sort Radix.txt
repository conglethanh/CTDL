int getMax(int *a, int n)
{
	int max = a[0];
	for (int i = 1; i < n; i++)
		if (a[i] > max)
			max = a[i];
	return max;
}

//base: co so
int digit(int x, int k)
{
	int exp = pow(10, k - 1);
	return (x / exp) % 10;
}

void rSort(int *a, int n, int k)
{
	int **L = new int*[10];

	int *len = new int[10]{ 0 };
	for (int i = 0; i < n; i++)
	{
		len[digit(a[i], k)]++;
	}

	for (int i = 0; i < 10; i++)
	{
		if (len[i] > 0)
		{
			L[i] = new int[len[i]]{ 0 };
		}
		else L[i] = NULL;
	}
	delete[] len;
	
	int *t = new int[10]{ 0 };
	for (int i = 0; i < n; i++)
	{
		int j = digit(a[i], k);
		L[j][t[j]++] = a[i];
	}

	int num = 0;
	for (int i = 0; i < 10; i++)
	{
		for (int j = 0; j < t[i]; j++)
		{
			a[num++] = L[i][j];
		}
	}
	delete[] t;

	for (int i = 0; i < 10; i++)
	{
		delete[] L[i];
	}
	delete[] L;
}

//radix sort tu phai sang trai
void radixSort(int *a, int n)
{
	int max = getMax(a, n);
	int d = 0;
	while (max > 0)
	{
		max /= 10;
		d++;
	}

	for (int i = 1; i <= d; i++)
	{
		rSort(a, n, i);
	}
}