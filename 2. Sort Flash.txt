void flashSort(int *a, int n){
	if (n == 0)
		return;
	int m = (int)((0.2*n) + 2);

	int min, max, maxIndex;
	min = max = a[0];
	maxIndex = 0;

	for (int i = 1; i < n; i += 2){
		int small;
		int big;
		int bigIndex;

		if (a[i] < a[i + 1]){
			small = a[i];
			big = a[i + 1];
			bigIndex = i + 1;
		}
		else
		{
			big = a[i];
			bigIndex = i + 1;
			small = a[i + 1];
		}

		if (big > max){
			max = big;
			maxIndex = bigIndex;
		}

		if (small < min){
			min = small;
		}
	}

	if (a[n - 1] < min){
		min = a[n - 1];
	}
	else if (a[n - 1]>max){
		max = a[n - 1];
		maxIndex = n - 1;
	}

	if (max == min){
		return;
	}

	int* L = new int[m + 1];

	for (int t = 0; t <= m; t++){
		L[t] = 0;
	}

	double c = (m - 1.0) / (max - min);
	int K;
	for (int h = 0; h < n; h++){
		K = ((int)((a[h] - min)*c)) + 1;
		L[K] += 1;
	}

	for (K = 2; K <= m; K++){
		L[K] = L[K] + L[K - 1];
	}

	int temp = a[maxIndex];
	a[maxIndex] = a[0];
	a[0] = temp;

	int j = 0;
	K = m;

	int numMoves = 0;
	while (numMoves < n){
		while (j >= L[K]){
			j++;
			K = ((int)((a[j] - min)*c)) + 1;
		}

		int evicted = a[j];
		while (j < L[K]){

			K = ((int)((evicted - min)*c)) + 1;
			int location = L[K] - 1;


			int temp = a[location];
			a[location] = evicted;
			evicted = temp;


			L[K] -= 1;
			numMoves++;
		}
	}

	int threshold = (int)(1.25*((n / m) + 1));

	const int minElements = 30;
	for (K = m - 1; K >= 1; K--){
		int classSize = L[K + 1] - L[K];
		if (classSize > threshold && classSize > minElements){
			flashSort(&a[L[K]], classSize);
		}
		else
		{
			if (classSize > 1){
				insertionSort(&a[L[K]], classSize);
			}
		}
	}
	delete[]L;
}